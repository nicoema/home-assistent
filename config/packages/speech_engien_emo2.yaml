# A input for Voices drop down
input_select:
  echos_voice2:
    name: Echos voice
    options:
      - Normal
      - Aria
      - Brian
      - Emma
      - Ivy
      - Nicole
      - Russell
    initial: Normal

# mqtt Sensor for Last Call.
mqtt:
  sensor:
  - name: "Echos Last Msg"
    state_topic: "house/alexa/lastmsg"
  - name: "Echos Last Location"
    state_topic: "house/alexa/lastloc"
  - name: "Echos Last Msg Time"
    state_topic: "house/alexa/msgtime"

script:
# My Script for advance Speech Engine with an chose fore conditon.
  speech_engine_emo2:
    description: Emotion Notification on a specific echo device
    fields:
      message:
        description: The text you would like to speak.
      who:
        description: Specific Echo or All. ( hallway, kitchen, bathroom, bedroom, studio, all (sensor or room_presence))
      effect:
        description: normal, high, low, whispered, wisp, happy, excited, disappointed, sad, news, (alert) will NOT whispered if Boolean is On))
      voice:
        description: states('input_select.echos_voice2') or Brian, Emma, Normal, Aria, Ivy, Nicole, Russell
      boolean:
        description: There is a Boolean in det Script. whispered if On.
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_boolean.night_time_on
                state: "off"
            sequence:
              - service: notify.alexa_media
                data:
                  message: |
                    {% if effect in ['normal'] %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody rate="normal"> <prosody pitch="normal">
                    {% elif effect in ['alert'] %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody volume="9dB"> <prosody rate="-10%">
                    {% elif effect in ['high'] %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody rate="high"> <prosody pitch="high">
                    {% elif effect in ['low'] %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody rate="slow"> <prosody pitch="low">
                    {% elif effect in ['whispered','wisp'] %}
                      <prosody pitch="low"> <amazon:effect name="whispered">
                    {% elif effect in ['happy'] %}
                      <voice name="{{ voice }}"> <prosody rate="normal"> <amazon:emotion name="excited" intensity="medium">
                    {% elif effect in ['excited'] %}
                      <voice name="{{ voice }}"> <prosody rate="normal"> <amazon:emotion name="excited" intensity="high">
                    {% elif effect in ['disappointed'] %}
                      <voice name="{{ voice }}"> <prosody rate="slow"> <amazon:emotion name="disappointed" intensity="high">
                    {% elif effect in ['sad'] %}
                      <voice name="{{ voice }}"> <prosody rate="slow"> <amazon:emotion name="disappointed" intensity="normal">
                    {% elif effect in ['news'] %}
                      <voice name="{{ voice }}"> <amazon:domain name="news">
                    {% else %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody rate="normal"> <prosody pitch="normal">
                    {% endif %}
                    {{ message }}
                    {% if effect in ['normal','high','low'] %}
                      </prosody> </prosody> </amazon:auto-breaths> </voice>
                    {% elif effect in ['alert'] %}
                      </prosody> </prosody> </amazon:auto-breaths> </voice>
                    {% elif effect in ['whispered','wisp'] %}
                      </amazon:effect> </prosody>
                    {% elif effect in ['happy','excited','disappointed','sad'] %}
                      </amazon:emotion> </prosody> </voice>
                    {% elif effect in ['news'] %}
                      </amazon:domain> </voice>
                    {% else %}
                      </prosody> </prosody> </amazon:auto-breaths> </voice>
                    {% endif %}
                  target: |
                    {% if who in ['hallway','media_player.echo_show','kitchen'] %}
                      media_player.echo_show
                    {% elif who in ['bedroom','media_player.bedroom_echo_dot'] %}
                      media_player.bedroom_echo_dot
                    {% elif who in ['studio','media_player.studio_echo_dot'] %}
                      media_player.studio_echo_dot
                    {% elif who in ['bathroom','media_player.bathroom_echo_dot'] %}
                      media_player.bathroom_echo_dot
                    {% elif who in ['all'] %}
                      group.echos
                    {% elif who in ['sensor','room_presence'] %}
                      {{ states('sensor.room_presence') }}
                    {% else %}
                      media_player.echo_show
                    {% endif %}
                  data:
                    type: tts
          - conditions:
              - condition: state
                entity_id: input_boolean.night_time_on
                state: "on"
            sequence:
              - service: notify.alexa_media
                data:
                  message: >
                    {% if effect in ['alert'] %}
                      <voice name="{{ voice }}"> <amazon:auto-breaths> <prosody volume="9dB"> <prosody rate="-10%">
                    {% else %}
                      <amazon:effect name="whispered">
                    {% endif %}
                    {{ message }}
                    {% if effect in ['alert'] %}
                      </prosody> </prosody> </amazon:auto-breaths> </voice>
                    {% else %}
                      </amazon:effect>
                    {% endif %}
                  target: |
                    {% if who in ['hallway','media_player.echo_show','kitchen'] %}
                      media_player.echo_show
                    {% elif who in ['bedroom','media_player.bedroom_echo_dot'] %}
                      media_player.bedroom_echo_dot
                    {% elif who in ['studio','media_player.studio_echo_dot'] %}
                      media_player.studio_echo_dot
                    {% elif who in ['bathroom','media_player.bathroom_echo_dot'] %}
                      media_player.bathroom_echo_dot
                    {% elif who in ['all'] %}
                      group.echos
                    {% elif who in ['sensor','room_presence'] %}
                      {{ states('sensor.room_presence') }}
                    {% else %}
                      media_player.echo_show
                    {% endif %}
                  data:
                    type: tts
############# EXAMPLE DOWN UNDER FOR AUTOMATION SPEECH ######################################################
#
# service: script.speech_engine_emo2
# data:
#   message: |
#     {{ [
#       "A new projekt or fixing Something?   ",
#       "Ok. What are we Fixing now?   ",
#       "Time to worke?   ",
#       "Working on a secret project? Sir   ",
#     ] | random +[
#
#       "Do You whant to fire up the Dressing room?",
#       "Lights On in the Dressing room as well Sir?",
#       "Should I turne On the Dressing room lights?",
#       "And the Dressing Room I guess?",
#       "Dressing Room On Sir?",
#       "How about the Dressing Room? Should I turne it ON?",
#       "Are you going to be needing Lights in the Dressing room?",
#     ] | random }}
#   who: studio, hallway, kitchen, bedroom, bathroom, all, sensor, room_presence
#   effect: normal, high, low, whispered, wisp, happy, excited, disappointed, sad, news, (alert) will NOT whispered if Boolean is On))
#   voice: "{{ states('input_select.echos_voice2') }}"

#
      # Save your message for recall
      - service: mqtt.publish
        data_template:
          topic: 'house/alexa/lastmsg'
          payload: >
            {% if msg_summary == 'recall' %}
              {% set msg_summary = '{{states(''sensor.echos_last_msg'')}}' %}
            {% else %}
              {% if msg_summary %}
                {% set message = msg_summary %}
              {% endif %}
              {%- macro cleanup(data) -%}
                {%- for item in data.split("\n")  if item | trim != "" -%}
                  {{ item | trim }} {% endfor -%}
              {%- endmacro -%}
              {{- cleanup( message | striptags | truncate(220) ) -}}
            {% endif %}
      # Save time of last message
      - service: mqtt.publish
        data_template:
          topic: 'house/alexa/msgtime'
          payload: >
            {{ now().strftime("%H") }}:{{ now().strftime("%M") }}
          retain: true

      # Save location
      - service: mqtt.publish
        data_template:
          topic: 'house/alexa/lastloc'
          payload: '{{ who }}'
          retain: true
  # Script for playing the last message.
  # You can call this from a routing on the Google Home or Amazon Echo
  # Or from an automation tiggered by a button.
  play_last_message:
    sequence:
      - service: script.speech_engine_emo2
        data:
            who: '{{ states(''sensor.room_presence'') }}'
            message: >
              At {{ states('sensor.echos_last_msg_time') }}
              in the
              {% if states("sensor.echos_last_location") == 'media_player.studio_echo_dot','studio' %}
                Studio
              {% elif states("sensor.echos_last_location") == 'media_player.echo_show','hallway','kitchen' %}
                Hallway
              {% elif states("sensor.echos_last_location") == 'media_player.bathroom_echo_dot','bathroom' %}
                Bathroom
              {% elif states("sensor.echos_last_location") == 'media_player.bedroom_echo_dot','bedroom' %}
                Bedroom
              {% else %}
                Someware
              {% endif %}
              I said. {{ states('sensor.echos_last_msg') }}
            msg_summary: "recall"
